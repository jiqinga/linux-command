name: CI
on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Modify README.md
        uses: jaywcjlove/github-action-modify-file-content@main
        with:
          path: README.md
          openDelimiter: '<!--AUTO_GENERATED_PLEASE_DONT_DELETE_IT-->'
          closeDelimiter: '<!--AUTO_GENERATED_PLEASE_DONT_DELETE_IT-END-->'
          body: |
            ${{steps.contributors.outputs.htmlList}}

      - name: Modify contributors.ejs
        uses: jaywcjlove/github-action-modify-file-content@main
        with:
          path: template/contributors.ejs
          openDelimiter: '<!--AUTO_GENERATED_PLEASE_DONT_DELETE_IT-->'
          closeDelimiter: '<!--AUTO_GENERATED_PLEASE_DONT_DELETE_IT-END-->'
          body: |
            ${{steps.contributors.outputs.htmlList}}
      - run: npm install
      - run: npm run dash

      - name: Build Linux Command
        run: |
          npm install
          npm run dash


      - name: Update Dash Feed
        run: |
          echo "${{steps.create_tag.outputs.versionNumber}}https://jaywcjlove.github.io/linux-command/linux-command.docset.tgz>" > .deploy/linux-command-docset.xml

      - name: Generate Changelog
        id: changelog
        uses: jaywcjlove/changelog-generator@main
        with:
          filter-author: (小弟调调™)
          filter: (^[\s]+?[R|r]elease)|(^[R|r]elease)

      - run: rm -rf .deploy/linux-command.docset 
      # Create Docker Image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image:latest
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USER }}/linux-command:latest

      - name: Build and push image:tags
        uses: docker/build-push-action@v3
        if: steps.create_tag.outputs.successful
        with:
          push: true
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USER }}/linux-command:${{steps.changelog.outputs.version}}

      # # Create Docker Image in Github
      # - name: Login to the GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build and push image:latest
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      #     context: .
      #     platforms: linux/amd64,linux/arm64
      #     tags: ghcr.io/jaywcjlove/linux-command:latest

      # - name: Build and push image:tags
      #   uses: docker/build-push-action@v3
      #   if: steps.create_tag.outputs.successful
      #   with:
      #     push: true
      #     context: .
      #     platforms: linux/amd64,linux/arm64
      #     tags: ghcr.io/jaywcjlove/linux-command:${{steps.changelog.outputs.version}}

      # # Create Docker Image
      # - name: Docker login
      #   run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      
      # - name: Build linux-command image
      #   run: |
      #     rm -rf .deploy/linux-command.docset.tgz
      #     docker image build -t linux-command .

      # - name: Tags & Push image(latest)
      #   run: |
      #     docker tag linux-command ${{ secrets.DOCKER_USER }}/linux-command:latest
      #     docker push ${{ secrets.DOCKER_USER }}/linux-command:latest

      # - name: Tags & Push image
      #   if: steps.create_tag.outputs.successful
      #   run: |
      #     echo "outputs.tag - ${{ steps.changelog.outputs.version }}"
      #     docker tag linux-command ${{ secrets.DOCKER_USER }}/linux-command:${{steps.changelog.outputs.version}}
      #     docker push ${{ secrets.DOCKER_USER }}/linux-command:${{steps.changelog.outputs.version}}

      # # Create Docker Image in Github
      # - name: Login to GitHub registry
      #   run: echo ${{ github.token }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # - name: Build docker image
      #   run: docker build -t ghcr.io/jaywcjlove/linux-command:latest .

      # - name: Publish to GitHub registry
      #   run: docker push ghcr.io/jaywcjlove/linux-command:latest

      # - name: Tag docker image (beta) and publish to GitHub registry
      #   if: steps.create_tag.outputs.successful
      #   run: |
      #       echo "version: v${{ steps.changelog.outputs.version }}"
      #       docker tag ghcr.io/jaywcjlove/linux-command:latest ghcr.io/jaywcjlove/linux-command:${{steps.changelog.outputs.version}}
      #       docker push ghcr.io/jaywcjlove/linux-command:${{steps.changelog.outputs.version}}
